(function($){$.setupResize={setDefaults(o={}){this.DEFAULTS=$.extend(true,this.DEFAULTS,o||{})},setDefault(prop,value){this.DEFAULTS[prop]=value},getDefaults(){return this.DEFAULTS},DEFAULTS:{debug:false,wait:400}};$.fn.resize=function(callbackOrOptionsOrMethod=null){if($(this).length>1){return $(this).each(function(){$(this).resize(callbackOrOptionsOrMethod)})}const $element=$(this);let previousSizes=null;let resizeObserver;function onResizing(newSizes,shouldTriggerEvent=true){const currentSizes=previousSizes||{width:0,height:0};const changeWidth=newSizes.width!==currentSizes.width;const changeHeight=newSizes.height!==currentSizes.height;if(!changeWidth&&!changeHeight)return;let axis;if(changeWidth&&changeHeight){axis="both"}else if(changeWidth){axis="x"}else{axis="y"}const diff={width:newSizes.width-currentSizes.width,height:newSizes.height-currentSizes.height};if(shouldTriggerEvent){$element.trigger("resize",[axis,newSizes,currentSizes,diff])}const settings=$element.data("resizeSettings");if(settings.debug){console.log("Resized on axis:",axis);console.log("New size:",newSizes);console.log("Previous size:",currentSizes);console.log("Diff:",diff)}if(typeof callbackOrOptionsOrMethod==="function"){callbackOrOptionsOrMethod(axis,newSizes,currentSizes,diff)}previousSizes=newSizes}function initEvents(){$element.on("remove",function(){if(resizeObserver){resizeObserver.disconnect()}})}function startObserver(){resizeObserver=new ResizeObserver(entries=>{for(let entry of entries){const{contentRect}=entry;const newSizes={width:contentRect.width,height:contentRect.height};if(!previousSizes){previousSizes=newSizes;return}const settings=$element.data("resizeSettings");clearTimeout($element.data("resizeTimeout"));$element.data("resizeTimeout",setTimeout(()=>onResizing(newSizes),settings.wait))}});resizeObserver.observe($element.get(0))}function init(){const customSettings=typeof callbackOrOptionsOrMethod==="object"?callbackOrOptionsOrMethod:{};const settings=$.extend({},$.setupResize.getDefaults(),customSettings);$element.data("resizeSettings",settings);$element.data("initResize",true);initEvents();startObserver()}function handleMethodCall(method){switch(method){case"resize":const currentSizes={width:$element.outerWidth(),height:$element.outerHeight()};onResizing(currentSizes,false);break;default:console.warn(`Method "${method}" is not supported.`);break}}if($element.data("initResize")!==true){init()}if(typeof callbackOrOptionsOrMethod==="string"){handleMethodCall(callbackOrOptionsOrMethod)}return $element}})(jQuery);